"It's", 'theres', 'as', 'this', 'in', 'one','all','one',
'been', 'part', 'When','may', 'that', 'or', 'me','K', "by",
'now', 'You', 'off', 'A', 'so', 'was')
trashwords.pattern <- apply(djt.dude, 1, function(x) !any(x %in% trashwords))
djt.final <- subset(djt.dude, trashwords.pattern)
wordcloud2(djt.final, size = 20, color = "random-light", backgroundColor = "grey")
wordcloud2(djt.final, minSize = 3, gridSize = 20, color = "random-light", backgroundColor = "grey")
wordcloud2(djt.final, minSize = 3, gridSize = 1, color = "random-light", backgroundColor = "grey")
wordcloud2(djt.final, minSize = 3, color = "random-light", backgroundColor = "grey")
wordcloud2(djt.final, minSize = 1, color = "random-light", backgroundColor = "grey")
wordcloud2(djt.final, color = "random-light", backgroundColor = "grey")
source('~/.active-rstudio-document', echo=TRUE)
wordcloud2(djt.final, size = 20 color = "random-light", backgroundColor = "grey")
wordcloud2(djt.final, size = 20, color = "random-light", backgroundColor = "grey")
wordcloud2(djt.final, size = 20, minSize = 2 color = "random-light", backgroundColor = "grey")
wordcloud2(djt.final, size = 20, minSize = 2, color = "random-light", backgroundColor = "grey")
trashwords <- c('https', 'RT', 't', 'and' , 'co', 'is','what', 'on',
'you', 'not', 'has', 'Dear', 'do', 'It', 'about', 'The',
'have', 'an', 'U', 'to', 'the', ' of', 'n', 's', 'I',
'our', 'for', 'are', 'He', 'he', 'of', 'his', 'a', 'So',
"It's", 'theres', 'as', 'this', 'in', 'one','all','one',
'been', 'part', 'When','may', 'that', 'or', 'me','K', "by",
'now', 'You', 'off', 'A', 'so', 'was','ha', 'know', 'Because',
'would', 'just', 'him', 'On', 'will')
trashwords.pattern <- apply(djt.dude, 1, function(x) !any(x %in% trashwords))
djt.final <- subset(djt.dude, trashwords.pattern)
wordcloud2(djt.final, size = 20, minSize = 2, color = "random-light", backgroundColor = "grey")
install.packages("ggmap", "mapproj")
source('~/.active-rstudio-document', echo=TRUE)
map <- get_map(location = c(lon = 308088 , lat = 2773742) zoom = 10, language = "zh-TW")
map <- get_map(location = c(lon = 308088 , lat = 2773742), zoom = 10, language = "zh-TW")
map <- get_map(location = c(lon = 120.233937, lat = 22.992013), zoom = 10,
maptype = "toner-lite",language = "zh-TW")
ggmap(map)
library(xml2)
data <- read_html("C:/UsersHeidi Chen/Documents/waterQuality.xml")
data <- read_xml("C:/UsersHeidi Chen/Documents/waterQuality.xml")
data <- read_xml("C:/Users/Heidi Chen/Documents/waterQuality.xml")
rm(list = ls())
data <- read_xml("C:/Users/Heidi Chen/Documents/waterQuality.xml")
View(data)
data <- data.frame(data)
xml_data <- xmlToList(data)
"csx" <= "is awesome"
power <- function (x){
x ** x
}
a <- 5
power(a)
a
power <- function (x){
x ** x
x
}
a <- 5
power(a)
##Though power(a) outputs a**a, variable remains unchanged.
a
power <- function (x){
x ** x
}
a <- 5
power(a)
##Though power(a) outputs a**a, variable remains unchanged.
a
power <- function (x){
x <- x ** x
x
}
a <- 5
power(a)
##Though power(a) outputs a**a, variable remains unchanged.
a
str(a)
mails <- c("john.doe@ivyleague.edu", "education@world.gov", "dalai.lama@peace.org", "invalid.edu", "quant@bigdatacollege.edu", "cookie.monster@sesame.tv")
#using grepl to match for "edu
grepl("edu", emails)
emails <- c("john.doe@ivyleague.edu", "education@world.gov", "dalai.lama@peace.org", "invalid.edu", "quant@bigdatacollege.edu", "cookie.monster@sesame.tv")
#using grepl to match for "edu
grepl("edu", emails)
grep("edu", emails)
#grepl returns a logic while grep just matches the pattern specified.
rm(list = ls())
?rm
?ls
library(gapminder)
gapminder
carbon <- data("CO2")
carbon
carbon <- data("CO2")
head(carbon)
CO2
carbon <- CO2
rm(CO2)
?filter
?arrange
?arrange
??arrange
carbon <- data("CO2")
carbon %>%
filter(., Treatment == "chilled") %>%
arrange(., desc(conc))
library(c(dplyr,magrittr))
library(dplyr)
library(magrittr)
library(dplyr)
library(magrittr)
carbon <- data("CO2")
carbon %>%
filter(., Treatment == "chilled") %>%
arrange(., desc(conc))
rm(list = ls())
data("CO2")
data("CO2")
CO2 %>%
filter(., Treatment == "chilled") %>%
arrange(., desc(conc))
data("CO2")
carbon <- CO2 %>%
filter(., Treatment == "chilled") %>%
#filter verb
arrange(., desc(conc))
#Arrange verb - sorts a table based on a variable, here we put it in descending order using desc().
View(CO2)
data("CO2")
carbon <- CO2 %>%
filter(., Treatment == "chilled") %>%
#filter verb
arrange(., desc(conc)) %>%
#Arrange verb - sorts a table based on a variable, here we put it in descending order using desc().
mutate(conc_per_t = conc / 100)
#Mutate verb here enables us to add in another column called conc_per_t. Helps in computing new variables.
library(dplyr)
library(magrittr)
library(ggplot2)
View(carbon)
ggplot(carbon, aes(x = conc, y = uptake, fill = Plant)) + geom_density(alpha = 0.3)
ggplot(carbon, aes(x = "conc", y = "uptake", fill = Plant)) + geom_density(alpha = 0.3)
ggplot(carbon, aes(x = "Plant", y = "conc")) + geom_histogram()
ggplot(carbon, aes(x = "Plant") + geom_histogram()
ggplot(carbon, aes(x = "Plant")) + geom_histogram()
ggplot(carbon, aes(x = conc, y = Type)) + geom_histogram()
ggplot(carbon, aes(x = conc) + geom_histogram()
ggplot(carbon, aes(x = conc)) + geom_histogram()
ggplot(CO2, aes(x = conc)) + geom_point()
ggplot(CO2, aes(x = conc, y = uptake)) + geom_point()
View(CO2)
View(CO2)
ggplot(CO2, aes(x = conc, y = uptake, color = treatment)) + geom_point()
ggplot(CO2, aes(x = conc, y = uptake, color = Treatment)) + geom_point()
ggplot(CO2, aes(x = Plant, y = uptake, color = Treatment, size = conc)) + geom_point()
ggplot(CO2, aes(x = Plant, y = uptake, color = Treatment, size = conc)) + geom_point() + facet_grid(~Type)
#LOAD THE LIBRARIES
library(tidyverse)
library(dplyr)
library(tm)
#IMPORT DATA
##Obtain the list of file locations
setwd("~/GitHub/CSX_RProject_Summer_2018/week_3/songs_data")
files_list <- list.files(path = ".", recursive = TRUE,
pattern = "*.txt$", full.names = TRUE)
##Obtain the names of files
Names <- read.csv("~/GitHub/CSX_RProject_Summer_2018/week_3/songs_data/billboardwinners.csv", sep = ".")
Names$X = NULL
##Clean the data
Names <- str_split_fixed(Names$ï..song_name..artist..year, ",",3)
colnames(Names)<-c("Song", "Artist", "Year")
##Obtain the list of songs and merging
songs <- lapply(files_list, read_file) %>%
data_frame(.) %>%
cbind(., Names)
library(tm)
rm(list = ls())
setwd("~/GitHub/CSX_RProject_Summer_2018/week_3/songs_data")
files_list <- list.files(path = ".", recursive = TRUE,
pattern = "*.txt$", full.names = TRUE)
#load in the txt files
songs <- lapply(files_list, read_file)
#load in the txt files
songs <- lapply(files_list, read_file) %>%
unlist()
class(songs)
songs <- lapply(files_list, read_file) %>%
unlist() %>%
as.data.frame(.) %>%
songs <- lapply(files_list, read_file) %>%
unlist() %>%
as.data.frame(.)
library(magrittr)
songs <- lapply(files_list, read_file) %>%
unlist() %>%
as.data.frame(.)
songs <- lapply(files_list, read_file) %>%
unlist() %>%
songs <- lapply(files_list, read_file) %>%
unlist(.)
df <- as.data.frame(songs)
corpus_song <- Corpus(VectorSource(df$songs))
#load in the txt files
songs <- lapply(files_list, read_file) %>%
unlist(.)
df <- as.data.frame(songs)
corpus_song <- Corpus(VectorSource(df$songs))
song_words <- corpus_song %>%
unnest_tokens(word, text) %>%
count(id, word, sort = TRUE) %>%
ungroup()
library(tidytext)
install.packages("tidytext")
library(tidytext)
song_words <- corpus_song %>%
unnest_tokens(word, text) %>%
count(id, word, sort = TRUE) %>%
ungroup()
View(corpus_song)
View(corpus_song)
song_words <- corpus_song %>%
tm_map(removePunctuation)  %>%
tm_map(removeNumbers)
dtm <- DocumentTermMatrix(song_words)
rowSums(as.matrix(dtm))
meta(corpus_song[[1]])
inspect(dtm)
rm(list = ls())
#fix some metadata issues
## load in the metadata
Names <- read.csv("~/GitHub/CSX_RProject_Summer_2018/week_3/songs_data/billboardwinners.csv", sep = ".")
Names$X = NULL
##Clean the data
Names <- str_split_fixed(Names$ï..song_name..artist..year, ",",3)
colnames(Names)<-c("Song", "Artist", "Year")
View(Names)
View(Names)
myReader <- readTabular(mapping=list(id = "Year", author = "Artist", title = "Song"))
library(tm)
rm(Names)
doc_tf <- apply(as.matrix(tdm), 2, function(word) {word/sum(word) })
library(tm)
library(magrittr)
library(tidytext)
setwd("~/GitHub/CSX_RProject_Summer_2018/week_3/songs_data")
files_list <- list.files(path = ".", recursive = TRUE,
pattern = "*.txt$", full.names = TRUE)
#load in the txt files
songs <- lapply(files_list, read_file) %>%
unlist(.)
#change data into corpus
df <- as.data.frame(songs)
corpus_song <- Corpus(VectorSource(df$songs), reader = myReader)
corpus_song <- Corpus(VectorSource(df$songs))
song_words <- corpus_song %>%
tm_map(removePunctuation)  %>%
tm_map(removeNumbers)
tdm <- DocumentTermMatrix(song_words)
doc_tf <- apply(as.matrix(tdm), 2, function(word) {word/sum(word) })
View(doc_tf)
idf <- function(doc) {
return(log2( length(doc) + 1 / nnzero(doc)) )
}
docs_idf <- apply(as.matrix(tdm), 1, idf)
library(Matrix)
docs_idf <- apply(as.matrix(tdm), 1, idf)
docs_tfidf <- docs_tf * docs_idf
doc_idf <- apply(as.matrix(tdm), 1, idf)
docs_tfidf <- doc_tf * doc_idf
View(docs_tfidf)
View(docs_tfidf)
library(ggfortify)
library(ggplot2)
install.packages("ggfortify")
library(ggfortify)
docs_pca <- prcomp(docs_tfidf, scale = T)
docs_pca <- prcomp(docs_tfidf, scale = T) %>%
autoplot(.)
autoplot(docs_pca, data = docs_tfidf)
## Drawing
autoplot(docs_pca, data = docs_tfidf, loadings = TRUE)
## Drawing
autoplot(docs_pca, data = docs_tfidf,
loadings = TRUE, loadings.colour = "blue")
docs.eig <- get_eig(docs_pca)
install.packages("factoextra")
##Drawing 2
fviz_eig(docs_pca)
library(factoextra)
##Drawing 2
fviz_eig(docs_pca)
fviz_eig(docs_pca)
fviz_pca_ind(docs_pca, geom.ind = c("point"), col.ind = "cos2")
fviz_pca_var(docs_pca, col.var = "contrib")
fviz_pca_biplot(docs_pca, geom.ind = "point")
docs.eig <- get_eig(docs_pca)
docs.var <- get_pca_var(docs_pca)
docs.ind <- get_pca_ind(docs_pca)
library(tm)
library(Matrix)
library(factoextra)
##Drawing 2
fviz_eig(docs_pca)
View(docs_pca)
class(docs_pca)
## PCA
docs_pca <- prcomp(docs_tfidf, scale = T)
class(docs_pca)
##Drawing 2
fviz_eig(docs_pca)
fviz_pca_ind(docs_pca, geom.ind = c("point"), col.ind = "cos2")
fviz_pca_var(docs_pca, col.var = "contrib")
fviz_pca_biplot(docs_pca, geom.ind = "point")
docs.eig <- get_eig(docs_pca)
docs.var <- get_pca_var(docs_pca)
docs.ind <- get_pca_ind(docs_pca)
rm(docs.eig)
rm(docs.var)
rm(docs.ind)
#kmeans
ind_coord2 <- doc_eig$coord[,1:2]
docs_eig <- get_eig(docs_pca)
docs_var <- get_pca_var(docs_pca)
docs_ind <- get_pca_ind(docs_pca)
#kmeans
ind_coord2 <- doc_eig$coord[,1:2]
#kmeans
ind_coord2 <- docs_eig$coord[,1:2]
wss <- c()
for (i in 1:10) {
wss[i] <- kmeans(ind_coord2, i)$tot.withinss
}
#kmeans
ind_coord2 <- docs_eig$coord[,1:2]
View(docs_eig)
View(docs_ind)
View(docs_var)
View(docs_ind)
View(docs_ind)
View(docs_ind)
#kmeans
ind_coord2 <- docs_ind$coord[,1:2]
wss <- c()
for (i in 1:10) {
wss[i] <- kmeans(ind_coord2, i)$tot.withinss
}
plot(wss, type = "b")
#clustering
km <- kmeans(ind_coord2, 3)
plot(ind_coord2, col = km$cluster)
points(km$centers, col = 1:3, pch = 8, cex = 2)
install.packages("RCurl")
library("tm", lib.loc="~/R/win-library/3.5")
remove.packages("tm", lib="~/R/win-library/3.5")
install.packages(tm)
install.packages("tm")
install.packages("tm")
ind_coord2
library(tm)
library(magrittr)
library(tidytext)
library(Matrix)
library(factoextra)
rm(list = ls())
Names <- read.csv("~/GitHub/CSX_RProject_Summer_2018/week_3/songs_data/billboardwinners.csv", sep = ".")
Names$X = NULL
Names <- str_split_fixed(Names$ï..song_name..artist..year, ",",3)
library(tidytext)
Names <- str_split_fixed(Names$ï..song_name..artist..year, ",",3)
library(stringr)
Names <- str_split_fixed(Names$ï..song_name..artist..year, ",",3)
colnames(Names)<-c("Song", "Artist", "Year")
View(Names)
setwd("~/GitHub/CSX_RProject_Summer_2018/week_3/songs_data")
files_list <- list.files(path = ".", recursive = TRUE,
pattern = "*.txt$", full.names = TRUE)
#load in the txt files
songs <- lapply(files_list, read_file) %>%
unlist(.)
library(tm)
library(magrittr)
library(tidytext)
library(Matrix)
library(factoextra)
library(stringr)
setwd("~/GitHub/CSX_RProject_Summer_2018/week_3/songs_data")
files_list <- list.files(path = ".", recursive = TRUE,
pattern = "*.txt$", full.names = TRUE)
#load in the txt files
songs <- lapply(files_list, read_file) %>%
unlist(.)
View(Names)
library(readr)
#load in the txt files
songs <- lapply(files_list, read_file) %>%
unlist(.)
#load in the txt files
songs <- lapply(files_list, read_file)
songs_unlist <- unlist(songs)
songs<- cbind(songs, colnames)
View(songs)
#load in the txt files
songs <- lapply(files_list, read_file)
songs<- cbind(songs, Names)
View(songs)
View(songs)
#load in the txt files
songs <- lapply(files_list, read_file)
View(songs)
View(songs)
#change data into corpus
df <- as.data.frame(songs) %>%
cbind(.,Names)
View(df)
View(Names)
rm(list = ls())
setwd("~/GitHub/CSX_RProject_Summer_2018/week_3/songs_data")
files_list <- list.files(path = ".", recursive = TRUE,
pattern = "*.txt$", full.names = TRUE)
#load in the txt files
songs <- lapply(files_list, read_file)
songs_unlist <- unlist(songs)
Names <- read.csv("~/GitHub/CSX_RProject_Summer_2018/week_3/songs_data/billboardwinners.csv", sep = ".")
Names$X = NULL
Names <- str_split_fixed(Names$ï..song_name..artist..year, ",",3)
colnames(Names)<-c("Song", "Artist", "Year")
View(songs)
View(songs)
df <- as.data.frame(songs) %>%
cbind(.,Names)
View(df)
View(df)
#change data into corpus
df <- as.data.frame(songs)
View(df)
View(df)
View(Names)
View(Names)
View(songs)
View(df)
df <- as.data.frame(songs) %>%
gather()
library(tidyr)
df <- as.data.frame(songs) %>%
gather()
View(df)
View(df)
df <- as.data.frame(songs) %>%
gather() %>%
cbind(.,Names)
View(df)
View(df)
corpus_song <- Corpus(VectorSource(df[["value"]]))
View(corpus_song)
for (i in 1:length(corpus_song)) {
attr(corpus_song[[i]], "ID") <- df$Song[i]
attr(corpus_song[[i]], "author") <- df$Artist[i]
attr(corpus_song[[i]], "description") <- df$Year[i]
}
View(corpus_song)
corpus_song <- VCorpus(DataframeSource(df),
readerControl = list(reader = readTabular(mapping = list(content = "value",
id = "Song", author = "Artist"))))
corpus_song <- VCorpus(DataframeSource(df),
readerControl = list(reader = reader(df), content = "value",
id = "Song", author = "Artist")))
corpus_song <- VCorpus(DataframeSource(df),
readerControl = list(reader = reader(df), content = "value",
id = "Song", author = "Artist"))
corpus_song <- VCorpus(DataframeSource(df),
readerControl = list(reader = reader(df), content = "value",
description = "Song", author = "Artist"))
setwd("~/GitHub/CSX_RProject_Summer_2018/week_3/songs_data")
docs_pca
source('~/GitHub/CSX_RProject_Summer_2018/week_3/TFIDF_PCA_Kmeans.R', echo=TRUE)
print(docs_pca)
docs_eig
docs_var
ind_coord2
files_list <- list.files(path = ".", recursive = TRUE,
pattern = "*.txt$", full.names = TRUE)
for (i in 1:22) {
songs<- read_file(files_list[i])
}
df <- as.data.frame(songs)
corpus_song <- Corpus(VectorSource(df$songs))
View(corpus_song)
files_list <- list.files(path = ".", recursive = TRUE,
pattern = "*.txt$", full.names = TRUE)
for (i in c(1:22)) {
songs<- read_file(files_list[i])
}
files_list <- list.files(path = ".", recursive = TRUE,
pattern = "*.txt$", full.names = TRUE)
for (i in c(1:22)) {
songs<- read_file(files_list[[i]])
}
files_list <- list.files(path = ".", recursive = TRUE,
pattern = "*.txt$" & !"*2018.txt$", full.names = TRUE)
files_list[23] = NULL
files_list <- list.files(path = ".", recursive = TRUE,
pattern = "*.txt$", full.names = TRUE)
files_list[23] = FALSE
songs <- lapply(files_list, read_file) %>%
unlist(.)
files_list <- list.files(path = ".", recursive = TRUE,
pattern = "*.txt$", full.names = TRUE)
files_list[-23]
songs <- lapply(files_list, read_file) %>%
unlist(.)
files_list
files_list <- list.files(path = ".", recursive = TRUE,
pattern = "*.txt$", full.names = TRUE)
files_list <- files_list[-23]
songs <- lapply(files_list, read_file) %>%
unlist(.)
