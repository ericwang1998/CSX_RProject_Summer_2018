order(djt.df, decreasing = TRUE)
djt.dude <- order(djt.df, decreasing = TRUE)
djt.dude <- djt.df[order(djt.df$Freq, decreasing = TRUE),]
View(djt.dude)
wordcloud2(djt.dude., size = 1.5, color = "random-light", backgroundColor = "grey")
library(wordcloud2)
wordcloud2(djt.dude., size = 1.5, color = "random-light", backgroundColor = "grey")
wordcloud2(djt.dude, size = 1.5, color = "random-light", backgroundColor = "grey")
rm(list = ls())
wordcloud2(djt.dude, size = 1.5, color = "random-light", backgroundColor = "grey")
source('~/.active-rstudio-document', echo=TRUE)
tweets.df <- twListToDF(tweets)
tweets.v <- tweets.df[,"text"] %>%
list(.) %>%
paste(., sep = "")
tweets.v
tweets.char <- tweets.df[,"text"] %>%
list(.) %>%
paste(., sep = "") %>%
gsub('[[:punct:]]+',' ',.)
remove(tweets.v)
tweets.char <- tweets.df[,"text"] %>%
list(.) %>%
paste(., sep = "") %>%
gsub('[[:punct:]]+',' ',.) %>%
strsplit(., " ")
djt.df <- as.data.frame(table(tweets.char))
djt.dude <- djt.df[order(djt.df$Freq, decreasing = TRUE),]
View(djt.dude)
View(djt.dude)
wordcloud2(djt.dude, size = 1.5, color = "random-light", backgroundColor = "grey")
wordcloud2(djt.dude, size = 3, color = "random-light", backgroundColor = "grey")
wordcloud2(djt.dude, size = 10, color = "random-light", backgroundColor = "grey")
djt.dude$tweets.char[trashwords]
trashwords <- c('https', 'RT', 't', 'and' , 'co', 'is','what', 'on',
'you', 'not', 'has', 'Dear', 'do', 'It', 'about', 'The'
'have', 'an')
trashwords <- c('https', 'RT', 't', 'and' , 'co', 'is','what', 'on',
'you', 'not', 'has', 'Dear', 'do', 'It', 'about', 'The',
'have', 'an')
djt.dude$tweets.char[trashwords]
remove(djt.dude$tweets.char[trashwords])
subset(djt.dude, tweets.char!=trashwords)
djt.dude <- subset(djt.dude, tweets.char!=trashwords)
djt.final <- subset(djt.dude, tweets.char!=trashwords)
remove(djt.final)
djt.dude[djt.dude$tweets.char != trashwords]
djt.dude[djt.dude$tweets.char == trashwords]
library(dplyr)
trashwords.pattern <- apply(djt.dude, 1, function(x) !any(x %in% trashwords))
djt.final <- subset(djt.dude, trashwords.pattern)
View(djt.final)
View(djt.final)
trashwords <- c('https', 'RT', 't', 'and' , 'co', 'is','what', 'on',
'you', 'not', 'has', 'Dear', 'do', 'It', 'about', 'The',
'have', 'an', " ")
trashwords.pattern <- apply(djt.dude, 1, function(x) !any(x %in% trashwords))
djt.final <- subset(djt.dude, trashwords.pattern)
View(djt.final)
View(djt.final)
wordcloud2(djt.dude, size = 10, color = "random-light", backgroundColor = "grey")
wordcloud2(djt.final, size = 10, color = "random-light", backgroundColor = "grey")
trashwords <- c('https', 'RT', 't', 'and' , 'co', 'is','what', 'on',
'you', 'not', 'has', 'Dear', 'do', 'It', 'about', 'The',
'have', 'an', 'U', 'to', 'the', ' of', 'n', 's', 'I',
'our', 'for', 'are', 'He', 'he')
trashwords.pattern <- apply(djt.dude, 1, function(x) !any(x %in% trashwords))
djt.final <- subset(djt.dude, trashwords.pattern)
wordcloud2(djt.final, size = 10, color = "random-light", backgroundColor = "grey")
trashwords <- c('https', 'RT', 't', 'and' , 'co', 'is','what', 'on',
'you', 'not', 'has', 'Dear', 'do', 'It', 'about', 'The',
'have', 'an', 'U', 'to', 'the', ' of', 'n', 's', 'I',
'our', 'for', 'are', 'He', 'he', 'of', 'his', 'a', 'So',
"It's", 'theres', 'as')
trashwords.pattern <- apply(djt.dude, 1, function(x) !any(x %in% trashwords))
djt.final <- subset(djt.dude, trashwords.pattern)
wordcloud2(djt.final, size = 10, color = "random-light", backgroundColor = "grey")
trashwords <- c('https', 'RT', 't', 'and' , 'co', 'is','what', 'on',
'you', 'not', 'has', 'Dear', 'do', 'It', 'about', 'The',
'have', 'an', 'U', 'to', 'the', ' of', 'n', 's', 'I',
'our', 'for', 'are', 'He', 'he', 'of', 'his', 'a', 'So',
"It's", 'theres', 'as', 'this', 'in', 'one','all','one',
'been', 'part', 'When'
)
trashwords.pattern <- apply(djt.dude, 1, function(x) !any(x %in% trashwords))
djt.final <- subset(djt.dude, trashwords.pattern)
wordcloud2(djt.final, size = 10, color = "random-light", backgroundColor = "grey")
trashwords <- c('https', 'RT', 't', 'and' , 'co', 'is','what', 'on',
'you', 'not', 'has', 'Dear', 'do', 'It', 'about', 'The',
'have', 'an', 'U', 'to', 'the', ' of', 'n', 's', 'I',
'our', 'for', 'are', 'He', 'he', 'of', 'his', 'a', 'So',
"It's", 'theres', 'as', 'this', 'in', 'one','all','one',
'been', 'part', 'When','may', 'that', 'or', 'me','K', "by"
)
trashwords.pattern <- apply(djt.dude, 1, function(x) !any(x %in% trashwords))
djt.final <- subset(djt.dude, trashwords.pattern)
wordcloud2(djt.final, size = 10, color = "random-light", backgroundColor = "grey")
wordcloud2(djt.final, size = 20, color = "random-light", backgroundColor = "grey")
trashwords <- c('https', 'RT', 't', 'and' , 'co', 'is','what', 'on',
'you', 'not', 'has', 'Dear', 'do', 'It', 'about', 'The',
'have', 'an', 'U', 'to', 'the', ' of', 'n', 's', 'I',
'our', 'for', 'are', 'He', 'he', 'of', 'his', 'a', 'So',
"It's", 'theres', 'as', 'this', 'in', 'one','all','one',
'been', 'part', 'When','may', 'that', 'or', 'me','K', "by",
'now', 'You', 'off', 'A', 'so', 'was')
trashwords.pattern <- apply(djt.dude, 1, function(x) !any(x %in% trashwords))
djt.final <- subset(djt.dude, trashwords.pattern)
wordcloud2(djt.final, size = 20, color = "random-light", backgroundColor = "grey")
wordcloud2(djt.final, minSize = 3, gridSize = 20, color = "random-light", backgroundColor = "grey")
wordcloud2(djt.final, minSize = 3, gridSize = 1, color = "random-light", backgroundColor = "grey")
wordcloud2(djt.final, minSize = 3, color = "random-light", backgroundColor = "grey")
wordcloud2(djt.final, minSize = 1, color = "random-light", backgroundColor = "grey")
wordcloud2(djt.final, color = "random-light", backgroundColor = "grey")
source('~/.active-rstudio-document', echo=TRUE)
wordcloud2(djt.final, size = 20 color = "random-light", backgroundColor = "grey")
wordcloud2(djt.final, size = 20, color = "random-light", backgroundColor = "grey")
wordcloud2(djt.final, size = 20, minSize = 2 color = "random-light", backgroundColor = "grey")
wordcloud2(djt.final, size = 20, minSize = 2, color = "random-light", backgroundColor = "grey")
trashwords <- c('https', 'RT', 't', 'and' , 'co', 'is','what', 'on',
'you', 'not', 'has', 'Dear', 'do', 'It', 'about', 'The',
'have', 'an', 'U', 'to', 'the', ' of', 'n', 's', 'I',
'our', 'for', 'are', 'He', 'he', 'of', 'his', 'a', 'So',
"It's", 'theres', 'as', 'this', 'in', 'one','all','one',
'been', 'part', 'When','may', 'that', 'or', 'me','K', "by",
'now', 'You', 'off', 'A', 'so', 'was','ha', 'know', 'Because',
'would', 'just', 'him', 'On', 'will')
trashwords.pattern <- apply(djt.dude, 1, function(x) !any(x %in% trashwords))
djt.final <- subset(djt.dude, trashwords.pattern)
wordcloud2(djt.final, size = 20, minSize = 2, color = "random-light", backgroundColor = "grey")
install.packages("ggmap", "mapproj")
source('~/.active-rstudio-document', echo=TRUE)
map <- get_map(location = c(lon = 308088 , lat = 2773742) zoom = 10, language = "zh-TW")
map <- get_map(location = c(lon = 308088 , lat = 2773742), zoom = 10, language = "zh-TW")
map <- get_map(location = c(lon = 120.233937, lat = 22.992013), zoom = 10,
maptype = "toner-lite",language = "zh-TW")
ggmap(map)
library(xml2)
data <- read_html("C:/UsersHeidi Chen/Documents/waterQuality.xml")
data <- read_xml("C:/UsersHeidi Chen/Documents/waterQuality.xml")
data <- read_xml("C:/Users/Heidi Chen/Documents/waterQuality.xml")
rm(list = ls())
data <- read_xml("C:/Users/Heidi Chen/Documents/waterQuality.xml")
View(data)
data <- data.frame(data)
xml_data <- xmlToList(data)
"csx" <= "is awesome"
power <- function (x){
x ** x
}
a <- 5
power(a)
a
power <- function (x){
x ** x
x
}
a <- 5
power(a)
##Though power(a) outputs a**a, variable remains unchanged.
a
power <- function (x){
x ** x
}
a <- 5
power(a)
##Though power(a) outputs a**a, variable remains unchanged.
a
power <- function (x){
x <- x ** x
x
}
a <- 5
power(a)
##Though power(a) outputs a**a, variable remains unchanged.
a
str(a)
mails <- c("john.doe@ivyleague.edu", "education@world.gov", "dalai.lama@peace.org", "invalid.edu", "quant@bigdatacollege.edu", "cookie.monster@sesame.tv")
#using grepl to match for "edu
grepl("edu", emails)
emails <- c("john.doe@ivyleague.edu", "education@world.gov", "dalai.lama@peace.org", "invalid.edu", "quant@bigdatacollege.edu", "cookie.monster@sesame.tv")
#using grepl to match for "edu
grepl("edu", emails)
grep("edu", emails)
#grepl returns a logic while grep just matches the pattern specified.
rm(list = ls())
?rm
?ls
library(gapminder)
gapminder
carbon <- data("CO2")
carbon
carbon <- data("CO2")
head(carbon)
CO2
carbon <- CO2
rm(CO2)
?filter
?arrange
?arrange
??arrange
carbon <- data("CO2")
carbon %>%
filter(., Treatment == "chilled") %>%
arrange(., desc(conc))
library(c(dplyr,magrittr))
library(dplyr)
library(magrittr)
library(dplyr)
library(magrittr)
carbon <- data("CO2")
carbon %>%
filter(., Treatment == "chilled") %>%
arrange(., desc(conc))
rm(list = ls())
data("CO2")
data("CO2")
CO2 %>%
filter(., Treatment == "chilled") %>%
arrange(., desc(conc))
data("CO2")
carbon <- CO2 %>%
filter(., Treatment == "chilled") %>%
#filter verb
arrange(., desc(conc))
#Arrange verb - sorts a table based on a variable, here we put it in descending order using desc().
View(CO2)
data("CO2")
carbon <- CO2 %>%
filter(., Treatment == "chilled") %>%
#filter verb
arrange(., desc(conc)) %>%
#Arrange verb - sorts a table based on a variable, here we put it in descending order using desc().
mutate(conc_per_t = conc / 100)
#Mutate verb here enables us to add in another column called conc_per_t. Helps in computing new variables.
library(dplyr)
library(magrittr)
library(ggplot2)
View(carbon)
ggplot(carbon, aes(x = conc, y = uptake, fill = Plant)) + geom_density(alpha = 0.3)
ggplot(carbon, aes(x = "conc", y = "uptake", fill = Plant)) + geom_density(alpha = 0.3)
ggplot(carbon, aes(x = "Plant", y = "conc")) + geom_histogram()
ggplot(carbon, aes(x = "Plant") + geom_histogram()
ggplot(carbon, aes(x = "Plant")) + geom_histogram()
ggplot(carbon, aes(x = conc, y = Type)) + geom_histogram()
ggplot(carbon, aes(x = conc) + geom_histogram()
ggplot(carbon, aes(x = conc)) + geom_histogram()
ggplot(CO2, aes(x = conc)) + geom_point()
ggplot(CO2, aes(x = conc, y = uptake)) + geom_point()
View(CO2)
View(CO2)
ggplot(CO2, aes(x = conc, y = uptake, color = treatment)) + geom_point()
ggplot(CO2, aes(x = conc, y = uptake, color = Treatment)) + geom_point()
ggplot(CO2, aes(x = Plant, y = uptake, color = Treatment, size = conc)) + geom_point()
ggplot(CO2, aes(x = Plant, y = uptake, color = Treatment, size = conc)) + geom_point() + facet_grid(~Type)
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/GitHub/CSX_RProject_Summer_2018/week_3")
source('~/.active-rstudio-document', echo=TRUE)
library(wordcloud2)
wordcloud2(wordfreq)
winecharacter <- t(dtm_matrix)
colnames(winecharacter) <- names(dtm_matrix[,1])
winecharacter<-data.frame(winecharacter,country=wine$country,
designation=wine$designation,
points=wine$points,
price1=wine$price)
winecharacter1<-data.frame(winecharacter[,1:447],points=winecharacter$points)
model<-lm(points~.,winecharacter1)
summary(model
summary(model)
rm(list = ls())
wine <- read.csv('./wine_data/winemag-data_first150k.csv')
split_desc <- wine$description
split_desc <- wine$description %>%
lapply(., str_split, sep = " ")
split_desc <- wine$description %>%
lapply(., str_split)
split_desc <- wine$description %>%
lapply(., str_split, " ")
split_desc
View(split_desc)
View(split_desc)
wine_words <- as.data.frame(split_desc)
split_desc <- wine$description %>%
sapply(., str_split, " ")
library(dplyr)
library(janeaustenr)
library(tidytext)
book_words <- austen_books()
View(book_words)
View(book_words)
book_words <- austen_books()%>%
unnest_tokens(word, text)
book_words <- austen_books()
View(wine)
View(wine)
split_desc <- wine %>%
unnest_tokens(description, x)
split_desc <- wine %>%
unnest_tokens(input = "description", token = "x")
library(tidytext)
library(dplyr)
split_desc <- wine %>%
unnest_tokens(input = "description", token = "x")
split_desc <- wine %>%
unnest_tokens(word, description)
View(wine)
View(wine)
split_desc <- wine %>%
unnest_tokens(output = word, input = "description", token = "X")
library(tm)
library(magrittr)
library(tidytext)
library(Matrix)
library(factoextra)
library(stringr)
library(readr)
library(tidyr)
setwd("~/GitHub/CSX_RProject_Summer_2018/week_3/songs_data")
files_list <- list.files(path = ".", recursive = TRUE,
pattern = "*.txt$", full.names = TRUE)
#load in the txt files
songs <- lapply(files_list, read_file) %>%
unlist(.)
#change data into corpus
df <- as.data.frame(songs)
corpus_song <- Corpus(VectorSource(df$songs))
#some slight cleaning
song_words <- corpus_song %>%
tm_map(removePunctuation)  %>%
tm_map(removeNumbers)
#obtain DTM
dtm <- DocumentTermMatrix(song_words)
inspect(dtm)
terms <- Terms(dtm)
head(terms)
terms
songs_tidy <- tidy(dtm)
songs_tidy
songs_tidy %>%
group_by(document) %>%
top_n(8) %>%
mutate(document = factor(as.numeric(document), levels = 1:17)) %>%
ggplot(aes(drlib::reorder_within(term, count, document), count)) +
geom_bar(stat = "identity") +
xlab("Top 5 Common Words") +
drlib::scale_x_reordered() +
coord_flip() +
facet_wrap(~ document, scales = "free")
songs_tidy %>%
group_by(document) %>%
top_n(8) %>%
ungroup() %>%
mutate(document = factor(as.numeric(document), levels = 1:17)) %>%
ggplot(aes(drlib::reorder_within(term, count, document), count)) +
geom_bar(stat = "identity") +
xlab("Top 5 Common Words") +
drlib::scale_x_reordered() +
coord_flip() +
facet_wrap(~ document, scales = "free")
install.packages(drlib)
devtools::install_github("dgrtwo/drlib"
devtools::install_github("dgrtwo/drlib")
devtools::install_github("dgrtwo/drlib")
install_github("dgrtwo/drlib")
songs_tidy %>%
group_by(document) %>%
top_n(8) %>%
ungroup() %>%
mutate(document = factor(as.numeric(document), levels = 1:17)) %>%
ggplot(aes(n/total, fill = document)) +
geom_histogram(show.legend = FALSE) +
facet_wrap(~document, ncol = 2, scales = "free_y")
View(songs_tidy)
View(songs_tidy)
songs_tidy %>%
group_by(document) %>%
top_n(8) %>%
ungroup() %>%
mutate(document = factor(as.numeric(document), levels = 1:17)) %>%
ggplot(aes(x = term, y = count, fill = document)) +
geom_histogram(show.legend = FALSE) +
facet_wrap(~document, ncol = 2, scales = "free_y")
songs_tidy %>%
group_by(document) %>%
top_n(8) %>%
ungroup() %>%
mutate(document = factor(as.numeric(document), levels = 1:17)) %>%
ggplot(aes(x = term, fill = document)) +
geom_histogram(show.legend = FALSE) +
facet_wrap(~document, ncol = 2, scales = "free_y")
songs_tidy %>%
group_by(document) %>%
top_n(8) %>%
ungroup() %>%
mutate(document = factor(as.numeric(document), levels = 1:17)) %>%
ggplot(aes(x = count, fill = document)) +
geom_histogram(show.legend = FALSE) +
facet_wrap(~document, ncol = 2, scales = "free_y")
songs_tidy %>%
group_by(document) %>%
top_n(8) %>%
ungroup() %>%
mutate(document = factor(as.numeric(document), levels = 1:17)) %>%
ggplot(aes(x = count, fill = document)) +
geom_histogram(show.legend = FALSE) +
facet_wrap(~document, ncol = 3, scales = "free_y")
songs_tidy %>%
arrange(desc(count)) %>%
mutate(word = factor(word, levels = rev(unique(word)))) %>%
group_by(document) %>%
top_n(8) %>%
ungroup %>%
ggplot(aes(term, count, fill = document)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "count") +
facet_wrap(~document, ncol = 3, scales = "free") +
coord_flip()
songs_tidy %>%
arrange(desc(count)) %>%
mutate(term = factor(term, levels = rev(unique(term)))) %>%
group_by(document) %>%
top_n(8) %>%
ungroup %>%
ggplot(aes(term, count, fill = document)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "count") +
facet_wrap(~document, ncol = 3, scales = "free") +
coord_flip()
setwd("~/GitHub/CSX_RProject_Summer_2018/week_3/songs_data")
songs_tidy <- tidy(dtm)
songs_tidy %>%
arrange(desc(count)) %>%
mutate(term = factor(term, levels = rev(unique(term)))) %>%
group_by(document) %>%
top_n(8) %>%
ungroup %>%
ggplot(aes(term, count, fill = document)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "count") +
facet_wrap(~document, ncol = 3, scales = "free") +
coord_flip()
setwd("~/GitHub/CSX_RProject_Summer_2018/week_3/songs_data")
songs_tidy %>%
arrange(desc(count)) %>%
mutate(term = factor(term, levels = rev(unique(term)))) %>%
group_by(document) %>%
top_n(8) %>%
ungroup %>%
ggplot(aes(term, count, fill = document)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "count") +
facet_wrap(~document, ncol = 3, scales = "free") +
coord_flip()
songs_tidy %>%
arrange(desc(count)) %>%
mutate(term = factor(term, levels = rev(unique(term)))) %>%
group_by(document) %>%
top_n(8) %>%
ungroup %>%
ggplot(aes(term, count, fill = document)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "count") +
facet_wrap(~document, ncol = 3, scales = "free") +
coord_flip() +
theme(plot.margin = unit(c(.2, .5, .2, .2), "cm"))
songs_tidy %>%
arrange(desc(count)) %>%
mutate(term = factor(term, levels = rev(unique(term)))) %>%
group_by(document) %>%
top_n(8) %>%
ungroup %>%
ggplot(aes(term, count, fill = document)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "count") +
facet_wrap(~document, ncol = 3, scales = "free") +
coord_flip() +
theme(plot.margin = unit(c(.3, .5, .3, .3), "cm"))
songs_tidy %>%
arrange(desc(count)) %>%
mutate(term = factor(term, levels = rev(unique(term)))) %>%
group_by(document) %>%
top_n(8) %>%
ungroup %>%
ggplot(aes(term, count, fill = document)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "count") +
facet_wrap(~document, ncol = 3, scales = "free") +
coord_flip() +
theme(plot.margin = unit(c(.5, .5, .5, .5), "cm"))
songs_tidy %>%
arrange(desc(count)) %>%
mutate(term = factor(term, levels = rev(unique(term)))) %>%
group_by(document) %>%
top_n(8) %>%
ungroup %>%
ggplot(aes(term, count, fill = document)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "count") +
facet_wrap(~document, ncol = 1, scales = "free") +
coord_flip() +
theme(plot.margin = unit(c(.5, .5, .5, .5), "cm"))
songs_tidy %>%
arrange(desc(count)) %>%
mutate(term = factor(term, levels = rev(unique(term)))) %>%
group_by(document) %>%
top_n(8) %>%
ungroup %>%
ggplot(aes(term, count, fill = document)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "count") +
facet_wrap(~document, ncol = 4, scales = "free") +
coord_flip()
