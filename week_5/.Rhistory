source('~/.active-rstudio-document', echo=TRUE)
wordcloud2(djt.final, size = 20 color = "random-light", backgroundColor = "grey")
wordcloud2(djt.final, size = 20, color = "random-light", backgroundColor = "grey")
wordcloud2(djt.final, size = 20, minSize = 2 color = "random-light", backgroundColor = "grey")
wordcloud2(djt.final, size = 20, minSize = 2, color = "random-light", backgroundColor = "grey")
trashwords <- c('https', 'RT', 't', 'and' , 'co', 'is','what', 'on',
'you', 'not', 'has', 'Dear', 'do', 'It', 'about', 'The',
'have', 'an', 'U', 'to', 'the', ' of', 'n', 's', 'I',
'our', 'for', 'are', 'He', 'he', 'of', 'his', 'a', 'So',
"It's", 'theres', 'as', 'this', 'in', 'one','all','one',
'been', 'part', 'When','may', 'that', 'or', 'me','K', "by",
'now', 'You', 'off', 'A', 'so', 'was','ha', 'know', 'Because',
'would', 'just', 'him', 'On', 'will')
trashwords.pattern <- apply(djt.dude, 1, function(x) !any(x %in% trashwords))
djt.final <- subset(djt.dude, trashwords.pattern)
wordcloud2(djt.final, size = 20, minSize = 2, color = "random-light", backgroundColor = "grey")
install.packages("ggmap", "mapproj")
source('~/.active-rstudio-document', echo=TRUE)
map <- get_map(location = c(lon = 308088 , lat = 2773742) zoom = 10, language = "zh-TW")
map <- get_map(location = c(lon = 308088 , lat = 2773742), zoom = 10, language = "zh-TW")
map <- get_map(location = c(lon = 120.233937, lat = 22.992013), zoom = 10,
maptype = "toner-lite",language = "zh-TW")
ggmap(map)
library(xml2)
data <- read_html("C:/UsersHeidi Chen/Documents/waterQuality.xml")
data <- read_xml("C:/UsersHeidi Chen/Documents/waterQuality.xml")
data <- read_xml("C:/Users/Heidi Chen/Documents/waterQuality.xml")
rm(list = ls())
data <- read_xml("C:/Users/Heidi Chen/Documents/waterQuality.xml")
View(data)
data <- data.frame(data)
xml_data <- xmlToList(data)
"csx" <= "is awesome"
power <- function (x){
x ** x
}
a <- 5
power(a)
a
power <- function (x){
x ** x
x
}
a <- 5
power(a)
##Though power(a) outputs a**a, variable remains unchanged.
a
power <- function (x){
x ** x
}
a <- 5
power(a)
##Though power(a) outputs a**a, variable remains unchanged.
a
power <- function (x){
x <- x ** x
x
}
a <- 5
power(a)
##Though power(a) outputs a**a, variable remains unchanged.
a
str(a)
mails <- c("john.doe@ivyleague.edu", "education@world.gov", "dalai.lama@peace.org", "invalid.edu", "quant@bigdatacollege.edu", "cookie.monster@sesame.tv")
#using grepl to match for "edu
grepl("edu", emails)
emails <- c("john.doe@ivyleague.edu", "education@world.gov", "dalai.lama@peace.org", "invalid.edu", "quant@bigdatacollege.edu", "cookie.monster@sesame.tv")
#using grepl to match for "edu
grepl("edu", emails)
grep("edu", emails)
#grepl returns a logic while grep just matches the pattern specified.
rm(list = ls())
?rm
?ls
library(gapminder)
gapminder
carbon <- data("CO2")
carbon
carbon <- data("CO2")
head(carbon)
CO2
carbon <- CO2
rm(CO2)
?filter
?arrange
?arrange
??arrange
carbon <- data("CO2")
carbon %>%
filter(., Treatment == "chilled") %>%
arrange(., desc(conc))
library(c(dplyr,magrittr))
library(dplyr)
library(magrittr)
library(dplyr)
library(magrittr)
carbon <- data("CO2")
carbon %>%
filter(., Treatment == "chilled") %>%
arrange(., desc(conc))
rm(list = ls())
data("CO2")
data("CO2")
CO2 %>%
filter(., Treatment == "chilled") %>%
arrange(., desc(conc))
data("CO2")
carbon <- CO2 %>%
filter(., Treatment == "chilled") %>%
#filter verb
arrange(., desc(conc))
#Arrange verb - sorts a table based on a variable, here we put it in descending order using desc().
View(CO2)
data("CO2")
carbon <- CO2 %>%
filter(., Treatment == "chilled") %>%
#filter verb
arrange(., desc(conc)) %>%
#Arrange verb - sorts a table based on a variable, here we put it in descending order using desc().
mutate(conc_per_t = conc / 100)
#Mutate verb here enables us to add in another column called conc_per_t. Helps in computing new variables.
library(dplyr)
library(magrittr)
library(ggplot2)
View(carbon)
ggplot(carbon, aes(x = conc, y = uptake, fill = Plant)) + geom_density(alpha = 0.3)
ggplot(carbon, aes(x = "conc", y = "uptake", fill = Plant)) + geom_density(alpha = 0.3)
ggplot(carbon, aes(x = "Plant", y = "conc")) + geom_histogram()
ggplot(carbon, aes(x = "Plant") + geom_histogram()
ggplot(carbon, aes(x = "Plant")) + geom_histogram()
ggplot(carbon, aes(x = conc, y = Type)) + geom_histogram()
ggplot(carbon, aes(x = conc) + geom_histogram()
ggplot(carbon, aes(x = conc)) + geom_histogram()
ggplot(CO2, aes(x = conc)) + geom_point()
ggplot(CO2, aes(x = conc, y = uptake)) + geom_point()
View(CO2)
View(CO2)
ggplot(CO2, aes(x = conc, y = uptake, color = treatment)) + geom_point()
ggplot(CO2, aes(x = conc, y = uptake, color = Treatment)) + geom_point()
ggplot(CO2, aes(x = Plant, y = uptake, color = Treatment, size = conc)) + geom_point()
ggplot(CO2, aes(x = Plant, y = uptake, color = Treatment, size = conc)) + geom_point() + facet_grid(~Type)
# So let us load in the data from the previous exercise.
library(magrittr)
library(dplyr)
require(ggpubr)
zomato <- read.csv("~/Github/CSX_RProject_Summer_2018/week_4/zomato-restaurants-data/zomato.csv")
Delhi_food <- zomato %>%
ungroup() %>%
filter(., City == "New Delhi")
# Check for normality
Delhi_food %>%
qqnorm(Votes)
# Check for normality
Delhi_food$Price.range <- factor(Delhi_food$Price.range,
levels = c(1, 2, 3, 4))
price_anova <- anova(m1 <- lm(Aggregate.rating ~ Price.range, data = Delhi_food))
anova(m1 <- lm(Aggregate.rating ~ Price.range, data = Delhi_food))
summary(m1)$r.squared
anova(m2 <- update(m1, . ~ . +
Average.Cost.for.two, data = Delhi_food))
anova(m3 <- update(m2, . ~ . -
Price.range, data = Delhi_food))
res_lm <- lapply(list(m1, m2, m3), summary)
(res_lm[[2]]$r.sq - res_lm[[3]]$r.sq)/res_lm[[2]]$r.sq
anova(m3, m2)
# controlling for price range, effect of cost for 2.
(res_lm[[2]]$r.sq - res_lm[[1]]$r.sq)/res_lm[[1]]$r.sq
anova(m1, m2)
require(coefplot)
install.packages(coefplot)
install.packages("coefplot")
m2 <- lm(Aggregate.rating ~ Price.range + Average.Cost.for.two- 1,
data = Delhi_food)
coefplot(m2, xlab = "Estimated Value", ylab = "Regression coefficient", title = "Response Variable = Aggregate Rating")
require(coefplot)
m2 <- lm(Aggregate.rating ~ Price.range + Average.Cost.for.two- 1,
data = Delhi_food)
rm(zomato)
require(coefplot)
m2 <- lm(Aggregate.rating ~ Price.range + Average.Cost.for.two- 1,
data = Delhi_food)
coefplot(m2, xlab = "Estimated Value", ylab = "Regression coefficient", title = "Response Variable = Aggregate Rating")
fit_m2 <- data.frame(Delhi_food[, c(2, 12, 13)], fitted = fitted(m2))
fit_m2 <- data.frame(Delhi_food[, c(2, 12, 13)], fitted = fitted(m2), resid = resid(m2),
infl = influence(m2)$hat )
fit_m2 <- data.frame(Delhi_food[, c(22, 23, 24)], fitted = fitted(m2), resid = resid(m2),
infl = influence(m2)$hat )
fit_m2 <- data.frame(Delhi_food[, c(11, 14, 17)], fitted = fitted(m2), resid = resid(m2),
infl = influence(m2)$hat )
fit_m2 <- data.frame(Delhi_food[, c(14, 17, 18)], fitted = fitted(m2), resid = resid(m2),
infl = influence(m2)$hat )
ggplot(data = fit_m2, aes(x = Aggregate.rating, group = Price.range )) +
stat_density(geom = 'path', position = 'identity') +
stat_density(geom = 'path', position = 'identity', aes(x = fitted)) +
geom_vline(xintercept = c(with(dta, tapply(Aggregate.rating,Price.range, mean))), linetype = 'dotted')+
facet_grid(Price.range ~ .) +
scale_x_continuous(breaks = seq(200, 900, by = 100))+
labs(x = '數學分數', y = '機率密度')
ggplot(data = fit_m2, aes(x = Aggregate.rating, group = Price.range )) +
stat_density(geom = 'path', position = 'identity') +
stat_density(geom = 'path', position = 'identity', aes(x = fitted)) +
geom_vline(xintercept = c(with(Delhi_food, tapply(Aggregate.rating,Price.range, mean))), linetype = 'dotted')+
facet_grid(Price.range ~ .) +
scale_x_continuous(breaks = seq(200, 900, by = 100))+
labs(x = '數學分數', y = '機率密度')
ggplot(data = fit_m2, aes(x = Aggregate.rating, group = Price.range )) +
stat_density(geom = 'path', position = 'identity') +
stat_density(geom = 'path', position = 'identity', aes(x = fitted)) +
geom_vline(xintercept = c(with(Delhi_food, tapply(Aggregate.rating,Price.range, mean))), linetype = 'dotted')+
facet_grid(Price.range ~ .) +
scale_x_continuous(breaks = seq(200, 900, by = 100))+
labs(x = 'Aggregate Rating', y = 'Probability Density')
require(lattice)
qqmath(~ scale(resid) | parental.education, data = fit_m2, type = c('p', 'g', 'r'),
xlab = '常態位數', ylab = '標準化殘差', layout = c(2, 3),
pch = '.', cex = 2)
qqmath(~ scale(resid) | Price.range, data = fit_m2, type = c('p', 'g', 'r'),
xlab = '常態位數', ylab = '標準化殘差', layout = c(2, 3),
pch = '.', cex = 2)
ggplot(data = fit_m2, aes(x = fitted, y = scale(resid), group = Price.range )) +
geom_point(pch = 20, size = 1) +
stat_smooth(method = 'rlm', se = F) +
facet_grid(parental.education ~ .) +
labs(x = '數學預測值', y = '標準化殘差')
ggplot(data = fit_m2, aes(x = fitted, y = scale(resid), group = Price.range )) +
geom_point(pch = 20, size = 1) +
stat_smooth(method = 'rlm', se = F) +
facet_grid(Price.range ~ .) +
labs(x = '數學預測值', y = '標準化殘差')
ggplot(data = fit_m2, aes(x = fitted, y = scale(resid), group = Price.range )) +
geom_point(pch = 20, size = 1) +
stat_smooth(method = 'rlm', se = F) +
facet_grid(Price.range ~ .) +
labs(x = 'Predictor value', y = 'Standard error')
# Checking for linear and equal distribution
require(MASS)
summary(influence(m2)$hat)
theme_set(old)
rm(list = ls())
# So let us load in the data from the previous exercise.
library(magrittr)
library(dplyr)
require(ggpubr)
zomato <- read.csv("~/Github/CSX_RProject_Summer_2018/week_4/zomato-restaurants-data/zomato.csv")
Delhi_food <- zomato %>%
ungroup() %>%
filter(., City == "New Delhi")
# housekeeping
rm(zomato)
require(heplot)
require(heplots)
require(tidyr)
Delhi_food %>%
gather(-Aggregate.rating, -Price.range, -Average.Cost.for.two, -Has.Online.delivery, -Votes, key = "var", value = "Value") %>%
ggplot(aes(x = "Value", y = Aggregate.rating)) +
geom_point() +
facet_wrap(~ var, scales = "free") +
theme_bw()
Delhi_food %>%
gather(-Aggregate.rating, -Price.range, -Average.Cost.for.two, -Has.Online.delivery, -Votes, key = "var", value = "value") %>%
ggplot(aes(x = value, y = Aggregate.rating)) +
geom_point() +
facet_wrap(~ var, scales = "free") +
theme_bw()
Delhi_food %>%
gather(-Aggregate.rating, key = "var", value = "value") %>%
ggplot(aes(x = value, y = Aggregate.rating)) +
geom_point() +
facet_wrap(~ var, scales = "free") +
theme_bw()
unique(Delhi_food$Rating.text)
# Plotting correlations
require(corrplot)
install.packages(corrplot)
install.packages("corrplot")
# Plotting correlations
require(corrplot)
Delhi_food[, c("Aggregate.rating", "Price.range", "Average.Cost.for.two", "Has.Online.delivery", "Votes")]
Delhi_ratings<- Delhi_food[, c("Aggregate.rating", "Price.range", "Average.Cost.for.two", "Has.Online.delivery", "Votes")]
Delhi_ratings %>%
gather(-Aggregate.rating, key = "var", value = "value") %>%
ggplot(aes(x = value, y = Aggregate.rating)) +
geom_point() +
facet_wrap(~ var, scales = "free") +
theme_bw()
corrplot(cor(Delhi_ratings), method = 'ellipse', order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp')
corrplot(cor(Delhi_ratings), add = TRUE, type = 'lower', method = 'number',
order = 'hclust', col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
# Plotting correlations
require(corrplot)
corrplot(cor(Delhi_ratings), method = 'ellipse', order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp')
corrplot(cor(Delhi_ratings, use = "everything", method = "spearman"), method = 'ellipse', order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp')
corrplot(cor(as.numeric(Delhi_ratings), use = "everything", method = "spearman"), method = 'ellipse', order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp')
class(Delhi_ratings)
corrplot(cor(Delhi_ratings, use = "everything", method = "spearman"), method = 'ellipse', order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp')
corrplot(cor(x = Delhi_ratings$Aggregate.rating,
y = Delhi_ratings$Votes, method = "spearman"), method = 'ellipse', order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp')
corrplot(cor(Delhi_ratings), method = "spearman"), method = 'ellipse', order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp')
corrplot(cor(Delhi_ratings), method = "spearman"), method = 'ellipse', order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp')
corrplot(cor(Delhi_ratings), method = "spearman"), method = 'ellipse', order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp')
corrplot(cor(Delhi_ratings), method = "spearman"), method = 'ellipse', order = 'hclust', addrect = 4,
type = "upper", tl.pos = 'tp')
corrplot(cor(Delhi_ratings), method = "spearman"), method = 'ellipse', order = 'hclust', addrect = 4,
type = "upper" tl.pos = 'tp')
corrplot(cor(Delhi_ratings), method = "spearman"), method = 'ellipse', order = 'hclust', addrect = 4,
type = "upper")
corrplot(cor(Delhi_ratings), method = "spearman", method = 'ellipse', order = 'hclust', addrect = 4,
type = "upper", tl.pos = "tp")
corrplot(cor(Delhi_ratings, method = "spearman") method = 'ellipse', order = 'hclust', addrect = 4,
type = "upper", tl.pos = "tp")
corrplot(cor(Delhi_ratings, method = "spearman"), method = 'ellipse', order = 'hclust', addrect = 4,
type = "upper", tl.pos = "tp")
corrplot(Delhi_ratings, method = "Number", type = "Upper")
# Plotting correlations
# Create correlation matrix
res <- cor(Delhi_ratings) %>%
round(.,2)
Delhi_food$Average.Cost.for.two <- as.numeric(Delhi_food$Average.Cost.for.two)
Delhi_food$Votes <- as.numeric(Delhi_food$Votes)
# Scatterplot for the interested varaibles to look at correlations
Delhi_ratings<- Delhi_food[, c("Aggregate.rating", "Average.Cost.for.two", "Votes")]
Delhi_ratings %>%
gather(-Aggregate.rating, key = "var", value = "value") %>%
ggplot(aes(x = value, y = Aggregate.rating)) +
geom_point() +
facet_wrap(~ var, scales = "free") +
theme_bw()
# Plotting correlations
# Create correlation matrix
corrplot(Delhi_ratings, method = "Number", type = "Upper")
# Plotting correlations
# Create correlation matrix
corrplot(Delhi_ratings, method = "number", type = "Upper")
# Plotting correlations
# Create correlation matrix
corrplot(Delhi_ratings, method = "number", type = "upper")
# Plotting correlations
# Create correlation matrix
corrplot(cor(Delhi_ratings), method = "number", type = "upper")
corrplot(cor(Delhi_ratings), method = 'ellipse', order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp')
corrplot(cor(Delhi_ratings), add = TRUE, type = 'lower', method = 'number',
order = 'hclust', col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
# Add in the anova linear model
anova(m1 <- lm(Aggregate.rating ~ Price.range, data = Delhi_food))
anova(m2 <- update(m1, . ~ . + Average.Cost.for.two, data = Delhi_food))
anova(m3 <- update(m2, . ~ . - Price.range, data = Delhi_food))
m2 <- lm(Aggregate.rating ~ Price.range + Average.Cost.for.two- 1, data = Delhi_food)
summary(m4 <- lm(Aggregate.rating ~ Average.Cost.for.two + Votes, data = Delhi_ratings))
coefplot(m4, predictors = c('Average.Cost.for.two', 'Votes'),
xlab = 'Estimated Value', ylab = 'Regression Coefficient(Remove residuals)', title = 'Response variable is Aggregate rating')
require(effects)
install.packages("effects")
require(effects)
plot(allEffects(m4), main = '', ylim = c(550, 670), grid = T)
plot(allEffects(m4), main = '', ylim = c(0, 5), grid = T)
library(lm.beta)
install.packages("lm.beta")
library(lm.beta)
summary(lm.beta(m4))
# We will see if just average cost for two will affect the ratings
summary(m5 <- update(m4, . ~ . - Votes , data = Delhi_ratings))
anova(m5, m4)
# Time for some force fitting strategies
m5 <- lm(Aggregate.rating ~ Average.Cost.for.two + Has.Online.delivery + Votes + Price.range, data = Delhi_food)
fit_m5 <- data.frame(dta[, c(11, 14, 17, 18, 21)], fitted = fitted(m5), resid = resid(m5), infl = influence(m5)$hat)
fit_m5 <- data.frame(Delhi_food[, c(11, 14, 17, 18, 21)], fitted = fitted(m5), resid = resid(m5), infl = influence(m5)$hat)
ggplot(data = fit_m5, aes(x = Aggregate.rating, group = Average.Cost.for.two )) +
stat_density(geom = 'path', position = 'identity') +
stat_density(geom = 'path', position = 'identity', aes(x = fitted)) +
geom_vline(xintercept = c(with(dta, tapply(Aggregate.rating, Average.Cost.for.two, mean))), linetype = 'dotted')+
facet_grid(Average.Cost.for.two ~ .) +
scale_x_continuous(breaks = seq(200, 900, by = 100))+
labs(x = 'Aggregate rating', y = 'Probability density')
ggplot(data = fit_m5, aes(x = Aggregate.rating, group = Average.Cost.for.two )) +
stat_density(geom = 'path', position = 'identity') +
stat_density(geom = 'path', position = 'identity', aes(x = fitted)) +
geom_vline(xintercept = c(with(Delhi_food, tapply(Aggregate.rating, Average.Cost.for.two, mean))), linetype = 'dotted')+
facet_grid(Average.Cost.for.two ~ .) +
scale_x_continuous(breaks = seq(200, 900, by = 100))+
labs(x = 'Aggregate rating', y = 'Probability density')
ggplot(data = fit_m5, aes(x = Aggregate.rating, group = Has.Online.delivery )) +
stat_density(geom = 'path', position = 'identity') +
stat_density(geom = 'path', position = 'identity', aes(x = fitted)) +
geom_vline(xintercept = c(with(Delhi_food, tapply(Aggregate.rating, Has.Online.delivery, mean))), linetype = 'dotted')+
facet_grid(Has.Online.delivery ~ .) +
scale_x_continuous(breaks = seq(200, 900, by = 100))+
labs(x = 'Aggregate rating', y = 'Probability density')
ggplot(data = fit_m5, aes(x = Aggregate.rating, group = Price.range )) +
stat_density(geom = 'path', position = 'identity') +
stat_density(geom = 'path', position = 'identity', aes(x = fitted)) +
geom_vline(xintercept = c(with(Delhi_food, tapply(Aggregate.rating, Price.range, mean))), linetype = 'dotted')+
facet_grid(Price.range ~ .) +
scale_x_continuous(breaks = seq(200, 900, by = 100))+
labs(x = 'Aggregate rating', y = 'Probability density')
summary(lm.beta(m5))
m6 <- lm(Aggregate.rating ~ Has.Online.delivery + Price.range, data = Delhi_food)
fit_m6 <- data.frame(Delhi_food[, c(14, 18, 21)], fitted = fitted(m6), resid = resid(m6), infl = influence(m6)$hat)
ggplot(data = fit_m6, aes(x = Aggregate.rating, group = Price.range )) +
stat_density(geom = 'path', position = 'identity') +
stat_density(geom = 'path', position = 'identity', aes(x = fitted)) +
geom_vline(xintercept = c(with(Delhi_food, tapply(Aggregate.rating, Price.range, mean))), linetype = 'dotted')+
facet_grid(Price.range ~ .) +
scale_x_continuous(breaks = seq(200, 900, by = 100))+
labs(x = 'Aggregate rating', y = 'Probability density')
fit_m6 <- data.frame(Delhi_food[, c(14, 17, 18)], fitted = fitted(m6), resid = resid(m6), infl = influence(m6)$hat)
ggplot(data = fit_m6, aes(x = Aggregate.rating, group = Price.range )) +
stat_density(geom = 'path', position = 'identity') +
stat_density(geom = 'path', position = 'identity', aes(x = fitted)) +
geom_vline(xintercept = c(with(Delhi_food, tapply(Aggregate.rating, Price.range, mean))), linetype = 'dotted')+
facet_grid(Price.range ~ .) +
scale_x_continuous(breaks = seq(200, 900, by = 100))+
labs(x = 'Aggregate rating', y = 'Probability density')
summary(lm.beta(m6))
unique(Delhi_food$Currency)
ggplot(Delhi_food, aes(x = Currency)) + geom_bar()
ggplot(Delhi_food, aes(x = Currency, y = count)) + geom_col()
ggplot(Delhi_food, aes(x = Currency)) + geom_col()
ggplot(Delhi_food, aes(x = Currency)) + geom_count()
ggplot(Delhi_food, aes(x = Currency)) + geom_bar()
View(Delhi_food)
summary(Delhi_food$Currency)
library(magrittr)
library(dplyr)
require(ggpubr)
require(tidyr)
Delhi_ratings<- Delhi_food[, c("Aggregate.rating", "Average.Cost.for.two", "Votes")]
Delhi_ratings %>%
gather(-Aggregate.rating, key = "var", value = "value") %>%
ggplot(aes(x = value, y = Aggregate.rating)) +
geom_point() +
facet_wrap(~ var, scales = "free") +
theme_bw()
anova(m1 <- lm(Aggregate.rating ~ Price.range, data = Delhi_food))
anova(m2 <- update(m1, . ~ . + Average.Cost.for.two, data = Delhi_food))
anova(m3 <- update(m2, . ~ . - Price.range, data = Delhi_food))
m2 <- lm(Aggregate.rating ~ Price.range + Average.Cost.for.two- 1, data = Delhi_food)
summary(m4 <- lm(Aggregate.rating ~ Average.Cost.for.two + Votes, data = Delhi_ratings))
coefplot(m4, predictors = c('Average.Cost.for.two', 'Votes'),
xlab = 'Estimated Value', ylab = 'Regression Coefficient(Remove residuals)', title = 'Response variable is Aggregate rating')
require(effects)
plot(allEffects(m4), main = '', ylim = c(0, 5), grid = T)
rm(list = ls())
install.packages(shiny)
library(library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server))
library(shiny)
install.packages('rsconnect')
library(rsconnect)
rsconnect::setAccountInfo(name='ericwang6272',
token='1225E038D06217E3A4063BD91C909658',
secret='5mxE+P5FhMqRD9oKUIRVJZcGwS3GZGW0sF0ped6K')
library(shiny)
install.packages("shiny")
runExample(“01_hello")
runExample(“02_text") # 資料表格
library(shiny)
runExample(“01_hello")
runExample(“02_text") # 資料表格
runExample(“03_reactivity") # 回應設計 + 資料表格
runExample(“04_mpg") # 繪圖
runExample( “01_hello")
runExample(“02_text") # 資料表格
runExample( “01_hello")
runExample(“02_text") # 資料表格
runExample( “01_hello")
runExample(example = “01_hello")
runExample(example = “01_hello")
runExample("01_hello")
# runExample("01_hello")
runExample("layout1")
# runExample("01_hello")
runExample("02_text")
setwd("~/GitHub/CSX_RProject_Summer_2018/week_5")
runApp('~/MyShiny')
runApp('~/MyShiny')
runApp('~/MyShiny')
print(a)
runApp('~/MyShiny')
runApp('~/MyShiny')
runApp('~/MyShiny')
runApp('~/MyShiny')
faithful
library(help = "graphics")
runApp('~/MyShiny')
runApp('~/MyShiny')
runApp('~/MyShiny')
runApp('~/MyShiny')
runApp('~/MyShiny')
runApp('~/MyShiny')
runApp('~/MyShiny')
runApp('~/MyShiny')
runApp('~/MyShiny')
runApp('~/MyShiny')
runApp('~/MyShiny')
runApp('~/MyShiny')
runApp('~/MyShiny')
faithful
runApp('~/MyShiny')
